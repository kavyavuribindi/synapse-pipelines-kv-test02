{
	"name": "pl_MAIN_COPY_myLocalDB_to_AzureSQLDB",
	"properties": {
		"activities": [
			{
				"name": "LOOKUP_TABLE_NAMES",
				"description": "Gets the list of all the tables present in sample_db_tf Database",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": "\nSELECT s.name AS SchemaName,\n       t.name AS TableName\nFROM sys.schemas AS s \nINNER JOIN sys.tables AS t\n    ON s.schema_id=t.schema_id;",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "samp_db_tf",
						"type": "DatasetReference",
						"parameters": {
							"dbName": "samp_db_tf"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "FOR_EACH_TABLE",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "LOOKUP_TABLE_NAMES",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LOOKUP_TABLE_NAMES').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "COPY_TABLE",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [
								{
									"name": "Source",
									"value": "."
								},
								{
									"name": "Destination",
									"value": "@{item().SchemaName}.@{item().TableName}"
								}
							],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "@concat('SELECT * FROM ', item().SchemaName, '.', item().TableName)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "SqlServerSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"tableOption": "autoCreate"
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "samp_db_tf",
									"type": "DatasetReference",
									"parameters": {
										"dbName": "samp_db_tf"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "TargetDB",
									"type": "DatasetReference",
									"parameters": {
										"schemaName": {
											"value": "@item().SchemaName",
											"type": "Expression"
										},
										"tableName": {
											"value": "@item().TableName",
											"type": "Expression"
										},
										"dbName": "db-kv-test02"
									}
								}
							]
						},
						{
							"name": "SCRIPT_FOR_NULL_VALUES",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "COPY_TABLE",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "ls_db_kv_test02",
								"type": "LinkedServiceReference",
								"parameters": {
									"serverName": "sqlsvr-kv-test02.database.windows.net",
									"dbName": "db-kv-test02",
									"username": "kvtest02",
									"password": "Password123"
								}
							},
							"typeProperties": {
								"scripts": [
									{
										"parameters": [
											{
												"name": "SchemaName",
												"type": "String",
												"value": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"direction": "Input"
											},
											{
												"name": "TableName",
												"type": "String",
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"direction": "Input"
											}
										],
										"type": "Query",
										"text": "DECLARE @UpdateStatements NVARCHAR(MAX) = '';\r\n\r\nSELECT @UpdateStatements = \r\n    @UpdateStatements + \r\n    COLUMN_NAME + ' = COALESCE(' + COLUMN_NAME + ', ' + \r\n    CASE \r\n        WHEN DATA_TYPE IN ('int', 'numeric', 'decimal') THEN '0'\r\n        WHEN DATA_TYPE IN ('varchar', 'nvarchar') THEN '''Unknown'''\r\n        WHEN DATA_TYPE IN ('datetime', 'date') THEN '''1900-01-01'''\r\n    END + '), '\r\nFROM INFORMATION_SCHEMA.COLUMNS\r\nWHERE TABLE_SCHEMA = @SchemaName\r\n  AND TABLE_NAME = @TableName;\r\n\r\n-- Remove the trailing comma and space\r\nSET @UpdateStatements = LEFT(@UpdateStatements, LEN(@UpdateStatements) - 1);\r\n\r\nDECLARE @SqlScript NVARCHAR(MAX) = \r\n    'UPDATE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@TableName) +\r\n    ' SET ' + @UpdateStatements;\r\n\r\nEXEC sp_executesql @SqlScript;\r\n\r\n"
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2023-12-02T03:39:00Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}